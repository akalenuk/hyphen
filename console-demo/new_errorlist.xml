<?xml version="1.0" encoding="UTF-8"?>
<results>    <error id="toomanyconfigs" severity="style" msg="Too many #ifdef configurations - cppcheck only checks 12 configurations. Use --force to check all configurations. For more details, use --enable=information."/>
    <error id="AssignmentAddressToInteger" severity="style" msg="Assigning a pointer to an integer is not portable."/>
    <error id="AssignmentIntegerToAddress" severity="style" msg="Assigning an integer to a pointer is not portable."/>
    <error id="CastIntegerToAddressAtReturn" severity="style" msg="Returning an integer in a function with pointer return type is not portable."/>
    <error id="CastAddressToIntegerAtReturn" severity="style" msg="Returning an address value in a function with integer return type is not portable."/>
    <error id="assignIfError" severity="style" msg="Mismatching assignment and comparison, comparison &apos;&apos; is always false."/>
    <error id="comparisonError" severity="style" msg="Expression &apos;(X &amp; 0x6) == 0x1&apos; is always false."/>
    <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 1."/>
    <error id="mismatchingBitAnd" severity="style" msg="Mismatching bitmasks. Result is always 0 (X = Y &amp; 0xf0; Z = X &amp; 0x1; =&gt; Z=0)."/>
    <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter."/>
    <error id="returnAddressOfAutoVariable" severity="error" msg="Address of an auto-variable returned."/>
    <error id="returnLocalVariable" severity="error" msg="Pointer to local array variable returned."/>
    <error id="returnReference" severity="error" msg="Reference to auto variable returned."/>
    <error id="returnTempReference" severity="error" msg="Reference to temporary returned."/>
    <error id="autovarInvalidDeallocation" severity="error" msg="Deallocation of an auto-variable results in undefined behaviour."/>
    <error id="returnAddressOfFunctionParameter" severity="error" msg="Address of function parameter &apos;parameter&apos; returned."/>
    <error id="uselessAssignmentPtrArg" severity="style" msg="Assignment of function parameter has no effect outside the function."/>
    <error id="assignBoolToPointer" severity="error" msg="Boolean value assigned to pointer."/>
    <error id="comparisonOfFuncReturningBoolError" severity="style" msg="Comparison of a function returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator."/>
    <error id="comparisonOfTwoFuncsReturningBoolError" severity="style" msg="Comparison of two functions returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator."/>
    <error id="comparisonOfBoolWithBoolError" severity="style" msg="Comparison of a variable having boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator."/>
    <error id="incrementboolean" severity="style" msg="Incrementing a variable of type &apos;bool&apos; with postfix operator++ is deprecated by the C++ Standard. You should assign it the value &apos;true&apos; instead."/>
    <error id="comparisonOfBoolWithInt" severity="style" msg="Comparison of a boolean with an integer that is neither 1 nor 0."/>

    <error id="compareBoolExpressionWithInt" severity="style" msg="Comparison of a boolean expression with an integer other than 0 or 1."/>
    <error id="boostForeachError" severity="error" msg="BOOST_FOREACH caches the end() iterator. It&apos;s undefined behavior if you modify the container inside."/>
    <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;array[2]&apos; accessed at index 2, which is out of bounds."/>
    <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: buffer"/>
    <error id="outOfBounds" severity="error" msg="index is out of bounds: Supplied size 2 is larger than actual size 1."/>


    <error id="negativeIndex" severity="error" msg="Array index -1 is out of bounds."/>
    <error id="insecureCmdLineArgs" severity="error" msg="Buffer overrun possible for long command line arguments."/>
    <error id="pointerOutOfBounds" severity="style" msg="Undefined behaviour: Pointer arithmetic result does not point into or just past the end of the array."/>
    <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;index&apos; is used before limits check."/>
    <error id="possibleBufferAccessOutOfBounds" severity="style" msg="Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination)."/>

    <error id="argumentSize" severity="style" msg="The array &apos;array&apos; is too small, the function &apos;function&apos; expects a bigger one."/>
    <error id="writeOutsideBufferSize" severity="error" msg="Writing 1 bytes outside buffer size."/>
    <error id="noConstructor" severity="style" msg="The class &apos;classname&apos; does not have a constructor."/>
    <error id="copyCtorPointerCopying" severity="style" msg="Value of pointer &apos;var&apos;, which points to allocated memory, is copied in copy constructor instead of allocating new memory."/>
    <error id="noCopyConstructor" severity="style" msg="&apos;class class&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory."/>
    <error id="uninitMemberVar" severity="style" msg="Member variable &apos;classname::varname&apos; is not initialized in the constructor."/>
    <error id="operatorEqVarError" severity="style" msg="Member variable &apos;classname::&apos; is not assigned a value in &apos;classname::operator=&apos;."/>
    <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;classname::funcname&apos;"/>
    <error id="memsetClass" severity="error" msg="Using &apos;memfunc&apos; on class that contains a classname."/>
    <error id="mallocOnClassWarning" severity="style" msg="Memory for class instance allocated with malloc(), but class provides constructors."/>
    <error id="mallocOnClassError" severity="error" msg="Memory for class instance allocated with malloc(), but class contains a std::string."/>
    <error id="operatorEq" severity="style" msg="&apos;class::operator=&apos; should return &apos;class &amp;&apos;."/>
    <error id="virtualDestructor" severity="error" msg="Class &apos;Base&apos; which is inherited by class &apos;Derived&apos; does not have a virtual destructor."/>
    <error id="thisSubtraction" severity="style" msg="Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?"/>
    <error id="operatorEqRetRefThis" severity="style" msg="&apos;operator=&apos; should return reference to &apos;this&apos; instance."/>
    <error id="operatorEqToSelf" severity="style" msg="&apos;operator=&apos; should check for assignment to self to avoid problems with dynamic memory."/>



    <error id="useInitializationList" severity="style" msg="Variable &apos;variable&apos; is assigned in constructor body. Consider performing initialization in initialization list."/>
    <error id="duplInheritedMember" severity="style" msg="The class &apos;class&apos; defines member variable with name &apos;variable&apos; also defined in its parent class &apos;class&apos;."/>
    <error id="exceptThrowInDestructor" severity="error" msg="Exception thrown in destructor."/>
    <error id="exceptDeallocThrow" severity="style" msg="Exception thrown in invalid state, &apos;p&apos; points at deallocated memory."/>
    <error id="exceptRethrowCopy" severity="style" msg="Throwing a copy of the caught exception instead of rethrowing the original exception."/>
    <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference."/>
    <error id="coutCerrMisusage" severity="error" msg="Invalid usage of output stream: &apos;&lt;&lt; std::cout&apos;."/>
    <error id="fflushOnInputStream" severity="error" msg="fflush() called on input stream &apos;stdin&apos; results in undefined behaviour."/>
    <error id="IOWithoutPositioning" severity="error" msg="Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour."/>
    <error id="readWriteOnlyFile" severity="error" msg="Read operation on a file that was opened only for writing."/>
    <error id="writeReadOnlyFile" severity="error" msg="Write operation on a file that was opened only for reading."/>
    <error id="useClosedFile" severity="error" msg="Used file that is not opened."/>
    <error id="invalidscanf" severity="style" msg="scanf without field width limits can crash with huge input data."/>
    <error id="wrongPrintfScanfArgNum" severity="error" msg="printf format string requires 3 parameters but only 2 are given."/>
    <error id="invalidScanfArgType_s" severity="style" msg="%s in format string (no. 1) requires a &apos;char *&apos; but the argument type is Unknown."/>
    <error id="invalidScanfArgType_int" severity="style" msg="%d in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown."/>
    <error id="invalidScanfArgType_float" severity="style" msg="%f in format string (no. 1) requires &apos;float *&apos; but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_s" severity="style" msg="%s in format string (no. 1) requires a char* given in the argument list."/>
    <error id="invalidPrintfArgType_n" severity="style" msg="%n in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_p" severity="style" msg="%p in format string (no. 1) requires an address but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_int" severity="style" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_uint" severity="style" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_sint" severity="style" msg="%i in format string (no. 1) requires &apos;int&apos; but the argument type is Unknown."/>
    <error id="invalidPrintfArgType_float" severity="style" msg="%f in format string (no. 1) requires &apos;double&apos; but the argument type is Unknown."/>
    <error id="wrongPrintfScanfParameterPositionError" severity="style" msg="printf: referencing parameter 2 while 1 arguments given"/>
    <error id="deallocret" severity="error" msg="Returning/dereferencing &apos;p&apos; after it is deallocated / released"/>
    <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with funcName, funcName doesn&apos;t release it."/>
    <error id="publicAllocationError" severity="style" msg="Possible leak in public function. The pointer &apos;varname&apos; is not deallocated before it is allocated."/>
    <error id="unsafeClassCanLeak" severity="style" msg="Class &apos;class&apos; is unsafe, &apos;class::varname&apos; can leak by wrong usage."/>
    <error id="memleak" severity="error" msg="Memory leak: varname"/>
    <error id="resourceLeak" severity="error" msg="Resource leak: varname"/>
    <error id="deallocDealloc" severity="error" msg="Deallocating a deallocated pointer: varname"/>
    <error id="deallocuse" severity="error" msg="Dereferencing &apos;varname&apos; after it is deallocated / released"/>
    <error id="mismatchSize" severity="error" msg="The given size sz is mismatching"/>
    <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: varname"/>
    <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;varname&apos; nulled but not freed upon failure"/>
    <error id="nonreentrantFunctionscrypt" severity="style" msg="Non reentrant function &apos;crypt&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;crypt_r&apos;."/>
    <error id="nonreentrantFunctionsctermid" severity="style" msg="Non reentrant function &apos;ctermid&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;ctermid_r&apos;."/>
    <error id="nonreentrantFunctionsecvt" severity="style" msg="Non reentrant function &apos;ecvt&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;ecvt_r&apos;."/>
    <error id="nonreentrantFunctionsfcvt" severity="style" msg="Non reentrant function &apos;fcvt&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;fcvt_r&apos;."/>
    <error id="nonreentrantFunctionsfgetgrent" severity="style" msg="Non reentrant function &apos;fgetgrent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;fgetgrent_r&apos;."/>
    <error id="nonreentrantFunctionsfgetpwent" severity="style" msg="Non reentrant function &apos;fgetpwent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;fgetpwent_r&apos;."/>
    <error id="nonreentrantFunctionsfgetspent" severity="style" msg="Non reentrant function &apos;fgetspent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;fgetspent_r&apos;."/>
    <error id="nonreentrantFunctionsgcvt" severity="style" msg="Non reentrant function &apos;gcvt&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gcvt_r&apos;."/>
    <error id="nonreentrantFunctionsgetgrent" severity="style" msg="Non reentrant function &apos;getgrent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getgrent_r&apos;."/>
    <error id="nonreentrantFunctionsgetgrgid" severity="style" msg="Non reentrant function &apos;getgrgid&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getgrgid_r&apos;."/>
    <error id="nonreentrantFunctionsgetgrnam" severity="style" msg="Non reentrant function &apos;getgrnam&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getgrnam_r&apos;."/>
    <error id="nonreentrantFunctionsgethostbyaddr" severity="style" msg="Non reentrant function &apos;gethostbyaddr&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gethostbyaddr_r&apos;."/>
    <error id="nonreentrantFunctionsgethostbyname" severity="style" msg="Non reentrant function &apos;gethostbyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gethostbyname_r&apos;."/>
    <error id="nonreentrantFunctionsgethostbyname2" severity="style" msg="Non reentrant function &apos;gethostbyname2&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gethostbyname2_r&apos;."/>
    <error id="nonreentrantFunctionsgethostent" severity="style" msg="Non reentrant function &apos;gethostent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gethostent_r&apos;."/>
    <error id="nonreentrantFunctionsgetlogin" severity="style" msg="Non reentrant function &apos;getlogin&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getlogin_r&apos;."/>
    <error id="nonreentrantFunctionsgetnetbyaddr" severity="style" msg="Non reentrant function &apos;getnetbyaddr&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getnetbyaddr_r&apos;."/>
    <error id="nonreentrantFunctionsgetnetbyname" severity="style" msg="Non reentrant function &apos;getnetbyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getnetbyname_r&apos;."/>
    <error id="nonreentrantFunctionsgetnetgrent" severity="style" msg="Non reentrant function &apos;getnetgrent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getnetgrent_r&apos;."/>
    <error id="nonreentrantFunctionsgetprotobyname" severity="style" msg="Non reentrant function &apos;getprotobyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getprotobyname_r&apos;."/>
    <error id="nonreentrantFunctionsgetpwent" severity="style" msg="Non reentrant function &apos;getpwent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getpwent_r&apos;."/>
    <error id="nonreentrantFunctionsgetpwnam" severity="style" msg="Non reentrant function &apos;getpwnam&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getpwnam_r&apos;."/>
    <error id="nonreentrantFunctionsgetpwuid" severity="style" msg="Non reentrant function &apos;getpwuid&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getpwuid_r&apos;."/>
    <error id="nonreentrantFunctionsgetrpcbyname" severity="style" msg="Non reentrant function &apos;getrpcbyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getrpcbyname_r&apos;."/>
    <error id="nonreentrantFunctionsgetrpcbynumber" severity="style" msg="Non reentrant function &apos;getrpcbynumber&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getrpcbynumber_r&apos;."/>
    <error id="nonreentrantFunctionsgetrpcent" severity="style" msg="Non reentrant function &apos;getrpcent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getrpcent_r&apos;."/>
    <error id="nonreentrantFunctionsgetservbyname" severity="style" msg="Non reentrant function &apos;getservbyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getservbyname_r&apos;."/>
    <error id="nonreentrantFunctionsgetservbyport" severity="style" msg="Non reentrant function &apos;getservbyport&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getservbyport_r&apos;."/>
    <error id="nonreentrantFunctionsgetservent" severity="style" msg="Non reentrant function &apos;getservent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getservent_r&apos;."/>
    <error id="nonreentrantFunctionsgetspent" severity="style" msg="Non reentrant function &apos;getspent&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getspent_r&apos;."/>
    <error id="nonreentrantFunctionsgetspnam" severity="style" msg="Non reentrant function &apos;getspnam&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;getspnam_r&apos;."/>
    <error id="nonreentrantFunctionsgmtime" severity="style" msg="Non reentrant function &apos;gmtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;gmtime_r&apos;."/>
    <error id="nonreentrantFunctionslocaltime" severity="style" msg="Non reentrant function &apos;localtime&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;localtime_r&apos;."/>
    <error id="nonreentrantFunctionsreaddir" severity="style" msg="Non reentrant function &apos;readdir&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;readdir_r&apos;."/>
    <error id="nonreentrantFunctionsstrtok" severity="style" msg="Non reentrant function &apos;strtok&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;strtok_r&apos;."/>
    <error id="nonreentrantFunctionstempnam" severity="style" msg="Non reentrant function &apos;tempnam&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;tempnam_r&apos;."/>
    <error id="nonreentrantFunctionsttyname" severity="style" msg="Non reentrant function &apos;ttyname&apos; called. For threadsafe applications it is recommended to use the reentrant replacement function &apos;ttyname_r&apos;."/>
    <error id="nullPointer" severity="error" msg="Possible null pointer dereference: pointer"/>
    <error id="obsoleteFunctionsasctime_r" severity="style" msg="Obsolete function &apos;asctime_r&apos; called. It is recommended to use the function &apos;strftime&apos; instead."/>
    <error id="obsoleteFunctionsbcmp" severity="style" msg="Obsolete function &apos;bcmp&apos; called. It is recommended to use the function &apos;memcmp&apos; instead."/>
    <error id="obsoleteFunctionsbcopy" severity="style" msg="Obsolete function &apos;bcopy&apos; called. It is recommended to use the &apos;memmove&apos; or &apos;memcpy&apos; function instead."/>
    <error id="obsoleteFunctionsbsd_signal" severity="style" msg="Obsolete function &apos;bsd_signal&apos; called. It is recommended to use the function &apos;sigaction&apos; instead."/>
    <error id="obsoleteFunctionsbzero" severity="style" msg="Obsolete function &apos;bzero&apos; called. It is recommended to use the function &apos;memset&apos; instead."/>
    <error id="obsoleteFunctionsctime_r" severity="style" msg="Obsolete function &apos;ctime_r&apos; called. It is recommended to use the function &apos;strftime&apos; instead."/>
    <error id="obsoleteFunctionsecvt" severity="style" msg="Obsolete function &apos;ecvt&apos; called. It is recommended to use the function &apos;sprintf&apos; instead."/>
    <error id="obsoleteFunctionsfcvt" severity="style" msg="Obsolete function &apos;fcvt&apos; called. It is recommended to use the function &apos;sprintf&apos; instead."/>
    <error id="obsoleteFunctionsftime" severity="style" msg="Obsolete function &apos;ftime&apos; called. It is recommended to use time(), gettimeofday() or clock_gettime() instead."/>
    <error id="obsoleteFunctionsgcvt" severity="style" msg="Obsolete function &apos;gcvt&apos; called. It is recommended to use the function &apos;sprintf&apos; instead."/>
    <error id="obsoleteFunctionsgetcontext" severity="style" msg="Obsolete function &apos;getcontext&apos; called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads."/>
    <error id="obsoleteFunctionsgethostbyaddr" severity="style" msg="Obsolete function &apos;gethostbyaddr&apos; called. It is recommended to use the function &apos;getnameinfo&apos; instead."/>
    <error id="obsoleteFunctionsgethostbyname" severity="style" msg="Obsolete function &apos;gethostbyname&apos; called. It is recommended to use the function &apos;getaddrinfo&apos; instead."/>
    <error id="obsoleteFunctionsgetwd" severity="style" msg="Obsolete function &apos;getwd&apos; called. It is recommended to use the function &apos;getcwd&apos; instead."/>
    <error id="obsoleteFunctionsindex" severity="style" msg="Obsolete function &apos;index&apos; called. It is recommended to use the function &apos;strchr&apos; instead."/>
    <error id="obsoleteFunctionsmakecontext" severity="style" msg="Obsolete function &apos;makecontext&apos; called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads."/>
    <error id="obsoleteFunctionspthread_attr_getstackaddr" severity="style" msg="Obsolete function &apos;pthread_attr_getstackaddr&apos; called. It is recommended to use the function &apos;pthread_attr_getstack&apos; instead."/>
    <error id="obsoleteFunctionspthread_attr_setstackaddr" severity="style" msg="Obsolete function &apos;pthread_attr_setstackaddr&apos; called. It is recommended to use the function &apos;pthread_attr_setstack&apos; instead."/>
    <error id="obsoleteFunctionsrand_r" severity="style" msg="Obsolete function &apos;rand_r&apos; called. It is recommended to use the function &apos;rand&apos; instead."/>
    <error id="obsoleteFunctionsrindex" severity="style" msg="Obsolete function &apos;rindex&apos; called. It is recommended to use the function &apos;strrchr&apos; instead."/>
    <error id="obsoleteFunctionsscalbln" severity="style" msg="Obsolete function &apos;scalb&apos; called. It is recommended to use &apos;scalbln&apos;, &apos;scalblnf&apos; or &apos;scalblnl&apos; instead."/>
    <error id="obsoleteFunctionsswapcontext" severity="style" msg="Obsolete function &apos;swapcontext&apos; called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads."/>
    <error id="obsoleteFunctionstmpnam" severity="style" msg="Obsolete function &apos;tmpnam&apos; called. It is recommended to use &apos;tmpfile&apos;, &apos;mkstemp&apos; or &apos;mkdtemp&apos; instead."/>
    <error id="obsoleteFunctionstmpnam_r" severity="style" msg="Obsolete function &apos;tmpnam_r&apos; called. It is recommended to use &apos;tmpfile&apos;, &apos;mkstemp&apos; or &apos;mkdtemp&apos; instead."/>
    <error id="obsoleteFunctionsualarm" severity="style" msg="Obsolete function &apos;ualarm&apos; called. It is recommended to use &apos;timer_create&apos;, &apos;timer_delete&apos;, &apos;timer_getoverrun&apos;, &apos;timer_gettime&apos; or &apos;timer_settime&apos; instead."/>
    <error id="obsoleteFunctionsusleep" severity="style" msg="Obsolete function &apos;usleep&apos; called. It is recommended to use the &apos;nanosleep&apos; or &apos;setitimer&apos; function instead."/>
    <error id="obsoleteFunctionsutime" severity="style" msg="Obsolete function &apos;utime&apos; called. It is recommended to use the function &apos;utimensat&apos; instead."/>
    <error id="obsoleteFunctionsvfork" severity="style" msg="Obsolete function &apos;vfork&apos; called. It is recommended to use the function &apos;fork&apos; instead."/>
    <error id="obsoleteFunctionswcswcs" severity="style" msg="Obsolete function &apos;wcswcs&apos; called. It is recommended to use the function &apos;wcsstr&apos; instead."/>
    <error id="sprintfOverlappingData" severity="error" msg="Undefined behavior: Variable &apos;varname&apos; is used as parameter and destination in s[n]printf()."/>
    <error id="udivError" severity="error" msg="Unsigned division. The result will be wrong."/>
    <error id="zerodiv" severity="error" msg="Division by zero."/>
    <error id="zerodivcond" severity="style" msg="Either the condition &apos;&apos; is useless or there is division by zero at line 0."/>
    <error id="wrongmathcall" severity="error" msg="Passing value &apos;#&apos; to #() leads to undefined result."/>
    <error id="unusedScopedObject" severity="error" msg="Instance of &apos;varname&apos; object is destroyed immediately."/>
    <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;varname&apos; is freed twice."/>
    <error id="invalidPointerCast" severity="style" msg="Casting between float* and double* which have an incompatible binary data representation."/>
    <error id="shiftNegative" severity="error" msg="Shifting by a negative value."/>
    <error id="wrongPipeParameterSize" severity="error" msg="Buffer &apos;varname&apos; must have size of 2 integers if used as parameter of pipe()."/>
    <error id="tooBigSleepTime" severity="error" msg="The argument of usleep must be less than 1000000."/>
    <error id="redundantCopyLocalConst" severity="style" msg="Use const reference for &apos;varname&apos; to avoid unnecessary data copying."/>
    <error id="redundantCopy" severity="style" msg="Buffer &apos;var&apos; is being written before its old content has been used."/>
    <error id="redundantAssignment" severity="style" msg="Variable &apos;var&apos; is reassigned a value before the old one has been used."/>
    <error id="comparisonFunctionIsAlwaysTrueOrFalse" severity="style" msg="Comparison of two identical variables with isless(varName,varName) evaluates always to false."/>
    <error id="checkCastIntToCharAndBack" severity="style" msg="Storing func_name() return value in char variable and then comparing with EOF."/>

    <error id="cstyleCast" severity="style" msg="C-style pointer casting"/>
    <error id="dangerousUsageStrtol" severity="error" msg="Invalid radix in call to strtol(). It must be 0 or 2-36."/>
    <error id="passedByValue" severity="style" msg="Function parameter &apos;parametername&apos; should be passed by reference."/>
    <error id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with type constant."/>
    <error id="charArrayIndex" severity="style" msg="Signed &apos;char&apos; type used as array index."/>
    <error id="charBitOp" severity="style" msg="When using &apos;char&apos; variables in bit operations, sign extension can generate unexpected results."/>
    <error id="variableScope" severity="style" msg="The scope of the variable &apos;varname&apos; can be reduced."/>
    <error id="strPlusChar" severity="error" msg="Unusual pointer arithmetic. A value of type &apos;char&apos; is added to a string literal."/>
    <error id="redundantAssignInSwitch" severity="style" msg="Variable &apos;var&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?"/>
    <error id="redundantCopyInSwitch" severity="style" msg="Buffer &apos;var&apos; is being written before its old content has been used. &apos;break;&apos; missing?"/>
    <error id="switchCaseFallThrough" severity="style" msg="Switch falls through case without comment. &apos;break;&apos; missing?"/>


    <error id="selfAssignment" severity="style" msg="Redundant assignment of &apos;varname&apos; to itself."/>
    <error id="incorrectLogicOperator" severity="style" msg="Logical disjunction always evaluates to true: foo &gt; 3 &amp;&amp; foo &lt; 4."/>
    <error id="redundantCondition" severity="style" msg="Redundant condition: If x &gt; 10 the condition x &gt; 11 is always true."/>
    <error id="memsetZeroBytes" severity="style" msg="memset() called to fill 0 bytes of &apos;varname&apos;."/>
    <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;+&apos; and &apos;?&apos;."/>
    <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses."/>
    <error id="clarifyStatement" severity="style" msg="Ineffective statement similar to &apos;*A++;&apos;. Did you intend to write &apos;(*A)++;&apos;?"/>
    <error id="incorrectStringCompare" severity="style" msg="String literal &quot;Hello World&quot; doesn&apos;t match length argument for substr()."/>
    <error id="literalWithCharPtrCompare" severity="style" msg="String literal compared with variable &apos;foo&apos;. Did you intend to use strcmp() instead?"/>
    <error id="incorrectStringBooleanError" severity="style" msg="Conversion of string literal &quot;Hello World&quot; to bool always evaluates to true."/>
    <error id="duplicateIf" severity="style" msg="Duplicate conditions in &apos;if&apos; and related &apos;else if&apos;."/>
    <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;."/>
    <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos;."/>
    <error id="staticStringCompare" severity="style" msg="Unnecessary comparison of static strings."/>
    <error id="stringCompare" severity="style" msg="Comparison of identical string variables."/>
    <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary."/>
    <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed."/>
    <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &apos;varname&apos; is less than zero."/>
    <error id="unsignedPositive" severity="style" msg="Unsigned variable &apos;varname&apos; can&apos;t be negative so it is unnecessary to test it."/>
    <error id="pointerLessThanZero" severity="style" msg="A pointer can not be negative so it is either pointless or an error to check if it is."/>
    <error id="pointerPositive" severity="style" msg="A pointer can not be negative so it is either pointless or an error to check if it is not."/>

    <error id="wrongcctypecall" severity="error" msg="Passing value value to funname() causes undefined behavior which may lead to a crash."/>
    <error id="moduloAlwaysTrueFalse" severity="style" msg="Comparison of modulo result is predetermined, because it is always less than 1."/>

    <error id="varFuncNullUB" severity="style" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour."/>
    <error id="nanInArithmeticExpression" severity="style" msg="Using NaN/Inf in a computation."/>
    <error id="commaSeparatedReturn" severity="style" msg="Comma is used in return statement. The comma can easily be misread as a &apos;;&apos;."/>
    <error id="invalidIterator1" severity="error" msg="Invalid iterator: iterator"/>
    <error id="iterators" severity="error" msg="Same iterator is used with different containers &apos;container1&apos; and &apos;container2&apos;."/>
    <error id="mismatchingContainers" severity="error" msg="Iterators of different containers are used together."/>
    <error id="eraseDereference" severity="error" msg="Invalid iterator &apos;iter&apos; used."/>
    <error id="stlOutOfBounds" severity="error" msg="When i==foo.size(), foo[i] is out of bounds."/>
    <error id="invalidIterator2" severity="error" msg="After push_back|push_front|insert(), the iterator &apos;iterator&apos; may be invalid."/>
    <error id="invalidPointer" severity="error" msg="Invalid pointer &apos;pointer&apos; after push_back()."/>
    <error id="stlBoundaries" severity="error" msg="Dangerous iterator comparison using operator&lt; on &apos;std::container&apos;."/>
    <error id="stlIfFind" severity="style" msg="Suspicious condition. The result of find() is an iterator, but it is not properly checked."/>
    <error id="stlIfStrFind" severity="style" msg="Inefficient usage of string::find() in condition; string::compare() would be faster."/>
    <error id="stlcstr" severity="error" msg="Dangerous usage of c_str(). The value returned by c_str() is invalid after this call."/>
    <error id="stlcstrReturn" severity="style" msg="Returning the result of c_str() in a function that returns std::string is slow and redundant."/>
    <error id="stlcstrParam" severity="style" msg="Passing the result of c_str() to a function that takes std::string as argument no. 0 is slow and redundant."/>
    <error id="stlSize" severity="style" msg="Possible inefficient checking for &apos;list&apos; emptiness."/>
    <error id="StlMissingComparison" severity="style" msg="Missing bounds check for extra iterator increment in loop."/>
    <error id="redundantIfRemove" severity="style" msg="Redundant checking of STL container element existence before removing it."/>
    <error id="useAutoPointerCopy" severity="style" msg="Copying &apos;auto_ptr&apos; pointer to another does not create two equal objects since one has lost its ownership of the pointer."/>
    <error id="useAutoPointerContainer" severity="error" msg="You can randomly lose access to pointers if you store &apos;auto_ptr&apos; pointers in an STL container."/>
    <error id="useAutoPointerArray" severity="error" msg="Object pointed by an &apos;auto_ptr&apos; is destroyed using operator &apos;delete&apos;. You should not use &apos;auto_ptr&apos; for pointers obtained with operator &apos;new[]&apos;."/>
    <error id="uselessCallsCompare" severity="style" msg="It is inefficient to call &apos;str.find(str)&apos; as it always returns 0."/>
    <error id="uselessCallsSwap" severity="style" msg="It is inefficient to swap a object with itself by calling &apos;str.swap(str)&apos;"/>
    <error id="uselessCallsSubstr" severity="style" msg="Ineffective call of function &apos;substr&apos; because it returns a copy of the object. Use operator= instead."/>
    <error id="uselessCallsEmpty" severity="style" msg="Ineffective call of function &apos;empty()&apos;. Did you intend to call &apos;clear()&apos; instead?"/>
    <error id="uselessCallsRemove" severity="style" msg="Return value of std::remove() ignored. Elements remain in container."/>
    <error id="derefInvalidIterator" severity="style" msg="Possible dereference of an invalid iterator: i"/>
    <error id="sizeofwithsilentarraypointer" severity="error" msg="Using &apos;sizeof&apos; on array given as function argument returns size of a pointer."/>

    <error id="sizeofwithnumericparameter" severity="style" msg="Suspicious usage of &apos;sizeof&apos; with a numeric constant as parameter."/>
    <error id="sizeofsizeof" severity="style" msg="Calling &apos;sizeof&apos; on &apos;sizeof&apos;."/>
    <error id="sizeofCalculation" severity="style" msg="Found calculation inside sizeof()."/>


    <error id="sizeofVoid" severity="style" msg="Behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard."/>
    <error id="sizeofDereferencedVoidPointer" severity="style" msg="&apos;*varname&apos; is of type &apos;void&apos;, the behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard."/>
    <error id="arithOperationsOnVoidPointer" severity="style" msg="&apos;varname&apos; is of type &apos;vartype&apos;. When using void pointers in calculations, the behaviour is undefined."/>
    <error id="uninitstring" severity="error" msg="Dangerous usage of &apos;varname&apos; (strncpy doesn&apos;t always null-terminate it)."/>
    <error id="uninitdata" severity="error" msg="Memory is allocated but not initialized: varname"/>
    <error id="uninitvar" severity="error" msg="Uninitialized variable: varname"/>
    <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: a.b"/>
    <error id="unusedFunction" severity="style" msg="The function &apos;funcName&apos; is never used."/>
    <error id="unusedVariable" severity="style" msg="Unused variable: varname"/>
    <error id="unusedAllocatedMemory" severity="style" msg="Variable &apos;varname&apos; is allocated memory that is never used."/>
    <error id="unreadVariable" severity="style" msg="Variable &apos;varname&apos; is assigned a value that is never used."/>
    <error id="unassignedVariable" severity="style" msg="Variable &apos;varname&apos; is not assigned a value."/>
    <error id="unusedStructMember" severity="style" msg="struct or union member &apos;structname::variable&apos; is never used."/>
    <error id="postfixOperator" severity="style" msg="Prefer prefix ++/-- operators for non-primitive types."/>
    <error id="simplePatternError" severity="style" msg="Found simple pattern inside Token::Match() call: &quot;class {&quot;"/>
    <error id="complexPatternError" severity="error" msg="Found complex pattern inside Token::Match() call: &quot;%type% ( )&quot;"/>
    <error id="missingPercentCharacter" severity="error" msg="Missing percent end character in Token::Match() pattern: &quot;%num&quot;"/>
    <error id="unknownPattern" severity="error" msg="Unknown pattern used: &quot;%typ&quot;"/>
    <error id="redundantNextPrevious" severity="style" msg="Call to &apos;Token::previous()&apos; followed by &apos;Token::next()&apos; can be simplified."/>
    <error id="syntaxError" severity="error" msg="Invalid number of character ( ) when these macros are defined: &apos;&apos;."/>
    <error id="cppcheckError" severity="error" msg="Analysis failed. If the code is valid then please report this failure."/>

    <error id="unnecessaryForwardDeclaration" severity="style" msg="The variable &apos;name&apos; forward declaration is unnecessary. Type variable is already declared earlier."/>
    <error id="variableHidingEnum" severity="style" msg="variable &apos;name&apos; hides enumerator with same name"/>
    <error id="unnecessaryQualification" severity="style" msg="The extra qualification &apos;type&apos; is unnecessary and is considered an error by many compilers."/>
    <error id="missingInclude" severity="style" msg="Include file: &quot;&quot; not found."/>
    <error id="missingIncludeSystem" severity="style" msg="Include file: &lt;&gt; not found."/>
    <error file="" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;X&apos; since the value of &apos;X&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly."/>
    <error id="preprocessorErrorDirective" severity="error" msg="#error message"/>
</results>
